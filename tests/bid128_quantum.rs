/* ---------------------------------------------------------------------------------------------------*/
/* Port of the Intel Decimal Floating-Point Math Library decimal128 type to Rust.                     */
/* decmathlib-rs - Copyright (C) 2023-2024 Carlos Guzmán Álvarez                                      */
/* -------------------------------------------------------------------------------------------------- */
/* Licensed under the MIT license. See LICENSE file in the project root for full license information. */
/* -------------------------------------------------------------------------------------------------- */
/* Intel® Decimal Floating-Point Math Library - Copyright (c) 2018, Intel Corp.                       */
/* -------------------------------------------------------------------------------------------------- */

mod common;

dec_test!(bid128_quantum_001, bid128_quantum, 0x304C0000000000000000000000003039u128, 0x304C0000000000000000000000000001u128);
dec_test!(bid128_quantum_002, bid128_quantum, 0xB04C0000000000000000000000003039u128, 0x304C0000000000000000000000000001u128);
dec_test!(bid128_quantum_003, bid128_quantum, 0x302C0000000000000000000000003039u128, 0x302C0000000000000000000000000001u128);
dec_test!(bid128_quantum_004, bid128_quantum, 0xB02C0000000000000000000000003039u128, 0x302C0000000000000000000000000001u128);
dec_test!(bid128_quantum_005, bid128_quantum, 0x30360000000000000000000000003039u128, 0x30360000000000000000000000000001u128);
dec_test!(bid128_quantum_006, bid128_quantum, 0xB0360000000000000000000000003039u128, 0x30360000000000000000000000000001u128);
dec_test!(bid128_quantum_007, bid128_quantum, 0x303E000000000000000000000001E23Au128, 0x303E0000000000000000000000000001u128);
dec_test!(bid128_quantum_008, bid128_quantum, 0x5FFE314DC6448D9338C15B0A00000000u128, 0x5FFE0000000000000000000000000001u128);
dec_test!(bid128_quantum_009, bid128_quantum, 0xDFFE314DC6448D9338C15B0A00000000u128, 0x5FFE0000000000000000000000000001u128);
dec_test!(bid128_quantum_010, bid128_quantum, 0x30400000000000000000000000000000u128, 0x30400000000000000000000000000001u128);
dec_test!(bid128_quantum_011, bid128_quantum, 0xB0400000000000000000000000000000u128, 0x30400000000000000000000000000001u128);
dec_test!(bid128_quantum_012, bid128_quantum, 0x00000000000000000000000000000001u128, 0x00000000000000000000000000000001u128);
dec_test!(bid128_quantum_013, bid128_quantum, 0x80000000000000000000000000000001u128, 0x00000000000000000000000000000001u128);
dec_test!(bid128_quantum_014, bid128_quantum, 0x00000000000000000000000000000000u128, 0x00000000000000000000000000000001u128);
dec_test!(bid128_quantum_015, bid128_quantum, 0x78000000000000000000000000000000u128, 0x78000000000000000000000000000000u128);
